<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Visual Message Sign</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
            margin: 0;
            flex-direction: column;
            /* Added to stack textarea and sign vertically */
            gap: 20px;
            overflow-x: hidden;
        }
        .sign-container {
            display: flex;
            flex-direction: row;
        }
        .sign {
            background-color: #000;
            padding: 20px;
            border: 5px solid #ebb30e;
            border-radius: 10px;
            text-align: center;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .line {
            display: flex;
            justify-content: center;
            gap: 10px;
        }

        .letter {
            display: grid;
            grid-template-columns: repeat(10, 5px);
            grid-template-rows: repeat(14, 5px);
            gap: 1px;
        }

        .dot {
            width: 5px;
            height: 5px;
            background-color: #333;
            border-radius: 50%;
        }

        .dot.on {
            background-color: #FFBF00;
        }

        .share-button {
            padding: 10px 20px;
            background-color: #ebb30e;
            color: black;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
        }

        .share-url {
            margin-top: 10px;
            padding: 10px;
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 5px;
            display: none;
        }
        .pole-left {
            width: 1000px;
            height: 100px;
            background-color: #bdbdbd;
            margin-top: auto;
            margin-bottom: auto;
            border-bottom: inset 2px solid #616161;
        }
        .pole-right {
            width: 1000px;
            height: 100px;
            background-color: #bdbdbd;
            margin-top: auto;
            margin-bottom: auto;
            border-bottom: inset 2px solid #afaeae;
        }
        
    </style>
</head>

<body>
    <% if (!shared) { %>
        <textarea id="messageInput" rows="4" cols="50" placeholder="Enter your message here..."></textarea>
        <button class="share-button" onclick="shareMessage()">Share Message</button>
        <div class="share-url" id="shareUrl"></div>
    <% } %>
    
    
    <div class="sign-container">
        <div class="pole-left"></div>
        <div class="sign"></div>
        <div class="pole-right"></div>
    </div>
    <script>
        const charMap = {
                // 5 long
                // 7 tall
                'A': [
                    [0, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 1, 1, 1, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1]
                ],
                'B': [
                    [1, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 1, 1, 1, 0]
                ],
                'C': [
                    [0, 1, 1, 1, 1],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [0, 1, 1, 1, 1]
                ],
                'D': [
                    [1, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 1, 1, 1, 0]
                ],
                'E': [
                    [1, 1, 1, 1, 1],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1]
                ],
                'F': [
                    [1, 1, 1, 1, 1],
                    [1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0]
                ],
                'G': [
                    [0, 1, 1, 1, 1],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 1, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [0, 1, 1, 1, 1]
                ],
                'H': [
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 1, 1, 1, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1]
                ],
                'I': [
                    [1, 1, 1, 1, 1],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [1, 1, 1, 1, 1]
                ],
                'J': [
                    [1, 1, 1, 1, 1],
                    [0, 0, 0, 1, 0],
                    [0, 0, 0, 1, 0],
                    [0, 0, 0, 1, 0],
                    [0, 0, 0, 1, 0],
                    [1, 0, 0, 1, 0],
                    [0, 1, 1, 0, 0]
                ],
                'K': [
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 1, 0],
                    [1, 0, 1, 0, 0],
                    [1, 1, 0, 0, 0],
                    [1, 0, 1, 0, 0],
                    [1, 0, 0, 1, 0],
                    [1, 0, 0, 0, 1]
                ],
                'L': [
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1],
                ],
                'M': [
                    [1, 0, 0, 0, 1],
                    [1, 1, 0, 1, 1],
                    [1, 0, 1, 0, 1],
                    [1, 0, 1, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1]
                ],
                'N': [
                    [1, 0, 0, 0, 1],
                    [1, 1, 0, 0, 1],
                    [1, 0, 1, 0, 1],
                    [1, 0, 0, 1, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1]
                ],
                'O': [
                    [0, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [0, 1, 1, 1, 0]
                ],
                'P': [
                    [1, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 1, 1, 1, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0]
                ],
                'Q': [
                    [0, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 1, 0, 1],
                    [0, 1, 1, 1, 1]
                ],
                'R': [
                    [1, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 1, 1, 1, 0],
                    [1, 0, 1, 0, 0],
                    [1, 0, 0, 1, 0],
                    [1, 0, 0, 0, 1]
                ],
                'S': [
                    [0, 1, 1, 1, 1],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [0, 1, 1, 1, 0],
                    [0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 1],
                    [1, 1, 1, 1, 0]
                ],
                'T': [
                    [1, 1, 1, 1, 1],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0]
                ],
                'U': [
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [0, 1, 1, 1, 0]
                ],
                'V': [
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [0, 1, 0, 1, 0],
                    [0, 0, 1, 0, 0]
                ],
                'W': [
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 1, 0, 1],
                    [1, 0, 1, 0, 1],
                    [1, 1, 0, 1, 1],
                    [1, 0, 0, 0, 1]
                ],
                'X': [
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [0, 1, 0, 1, 0],
                    [0, 0, 1, 0, 0],
                    [0, 1, 0, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1]
                ],
                'Y': [
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [0, 1, 0, 1, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0]
                ],
                'Z': [
                    [1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1],
                    [0, 0, 0, 1, 0],
                    [0, 0, 1, 0, 0],
                    [0, 1, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1]
                ],
                'SPACE': [
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0]
                ],
                '-': [
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0]
                ],
                '0': [
                    [0, 1, 1, 1, 0],
                    [1, 1, 0, 0, 1],
                    [1, 0, 1, 0, 1],
                    [1, 0, 1, 0, 1],
                    [1, 0, 0, 1, 1],
                    [1, 0, 0, 1, 1],
                    [0, 1, 1, 1, 0]
                ],
                '1': [
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0]
                ],
                '2': [
                    [0, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [0, 0, 0, 0, 1],
                    [0, 1, 1, 1, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 1]
                ],
                '3': [
                    [0, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [0, 0, 0, 1, 0],
                    [0, 1, 1, 0, 0],
                    [0, 0, 0, 1, 0],
                    [1, 0, 0, 0, 1],
                    [0, 1, 1, 1, 0]
                ],
                '4': [
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 1]
                ],
                '5': [
                    [1, 1, 1, 1, 1],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 0],
                    [0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 1],
                    [1, 1, 1, 1, 0]
                ],
                '6': [
                    [0, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 0],
                    [1, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [0, 1, 1, 1, 0]
                ],
                '7': [
                    [1, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1],
                    [0, 0, 0, 1, 0],
                    [0, 0, 1, 0, 0],
                    [0, 1, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0]
                ],
                '8': [
                    [0, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [0, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [0, 1, 1, 1, 0]
                ],
                '9': [
                    [0, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [0, 1, 1, 1, 1],
                    [0, 0, 0, 0, 1],
                    [1, 0, 0, 0, 1],
                    [0, 1, 1, 1, 0]
                ],
                ':': [
                    [0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0]
                ],
                '.': [
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                ],
                '(': [
                    [0, 1, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0]
                ],
                ')': [
                    [0, 0, 1, 0, 0],
                    [0, 0, 0, 1, 0],
                    [0, 0, 0, 1, 0],
                    [0, 0, 0, 1, 0],
                    [0, 0, 0, 1, 0],
                    [0, 0, 0, 1, 0],
                    [0, 0, 1, 0, 0]
                ],
                '?': [
                    [0, 1, 1, 1, 0],
                    [1, 0, 0, 0, 1],
                    [0, 0, 0, 1, 0],
                    [0, 0, 1, 0, 0],
                    [0, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0]
                ],
                '!': [
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0]
                ],
                '$': [
                    [0, 0, 1, 0, 0],
                    [0, 1, 1, 1, 0],
                    [0, 1, 1, 0, 0],
                    [0, 1, 1, 1, 0],
                    [0, 0, 1, 1, 0],
                    [0, 1, 1, 1, 0],
                    [0, 0, 1, 0, 0]
                ],
                '\'': [
                    [0, 1, 0, 0, 0],
                    [0, 1, 0, 0, 0],
                    [0, 1, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0]
                ],
                '<': [
                    [0, 0, 0, 1, 0],
                    [0, 0, 1, 0, 0],
                    [0, 1, 0, 0, 0],
                    [1, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 0, 1, 0],
                ],
                '>': [
                    [0, 1, 0, 0, 0],
                    [0, 0, 1, 0, 0],
                    [0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 1],
                    [0, 0, 0, 1, 0],
                    [0, 0, 1, 0, 0],
                    [0, 1, 0, 0, 0],
                ]
            };

    </script>
    <script>
        function parseText(input) {
            const flashRegex = /=([^=]+)=/g;
            const varyRegex = /\{([^|]+)\|([^|]+)\|([^}]+)\}/g;

            let parsed = input.replace(flashRegex, '<span class="flashing">$1</span>');
            parsed = parsed.replace(varyRegex, '<span class="varying-content" data-content1="$1" data-content2="$2" data-content3="$3"></span>');

            return parsed;
        }
    </script>
    <script>
        function createDot(isOn, isFlashing) {
            const dot = document.createElement('div');
            dot.classList.add('dot');
            if (isOn) {
                dot.classList.add('on');
            }
            if (isFlashing) {
                dot.classList.add('flashing');
            }
            return dot;
        }

        function createLetter(char, isFlashing) {
            const letter = document.createElement('div');
            letter.classList.add('letter');
            const pattern = charMap[char] || charMap['SPACE']; // Use 'SPACE' if character not found
            if (pattern) {
                pattern.forEach(row => {
                    row.forEach(isOn => {
                        // Double the number of dots for each letter
                        letter.appendChild(createDot(isOn, isFlashing));
                        letter.appendChild(createDot(isOn, isFlashing));
                    });
                    // Add an extra row of dots
                    row.forEach(isOn => {
                        letter.appendChild(createDot(isOn, isFlashing));
                        letter.appendChild(createDot(isOn, isFlashing));
                    });
                });
            }
            return letter;
        }

        function buildWord(word) {
            word = word.toUpperCase();

            const maxLineLength = 14;
            const maxLines = 3;
            const lines = [];

            // Split the input word by newline characters
            const rawLines = word.split('[NL]');

            rawLines.forEach(rawLine => {
                const words = rawLine.split(' ');
                let currentLine = '';

                words.forEach(word => {
                    if ((currentLine + (currentLine ? ' ' : '') + word).length <= maxLineLength) {
                        currentLine += (currentLine ? ' ' : '') + word;
                    } else {
                        lines.push(currentLine);
                        currentLine = word;
                    }
                });
                lines.push(currentLine);
            });

            // Trim lines to maxLines
            if (lines.length > maxLines) {
                console.error('Phrase too long to display');
                lines.length = maxLines;
            }

            const sign = document.querySelector('.sign');
            sign.innerHTML = ''; // Clear previous content

            lines.forEach(line => {
                const length = line.length;
                const padding = maxLineLength - length;
                const paddingLeft = Math.floor(padding / 2);
                const paddingRight = padding - paddingLeft;
                const paddedLine = ' '.repeat(paddingLeft) + line + ' '.repeat(paddingRight);

                const lineDiv = document.createElement('div');
                lineDiv.classList.add('line'); // Create a line div
                
                let flashingChar = false;

                paddedLine.split('').forEach(char => {
                    if (char === ' ') {
                        char = 'SPACE'; // Replace space with 'SPACE'
                    }
                    if (char === '=') {
                        flashingChar = !flashingChar;
                        return;
                    }

                    lineDiv.appendChild(createLetter(char, flashingChar));
                });

                sign.appendChild(lineDiv);
            });
        }

        // Example usage:
        //buildWord('minutes to:[NL]US-20       15[NL]Salt Lake  277');
        //buildWord('minutes to:[NL]byu-idaho   15[NL]st.anthony  27');

        document.getElementById('messageInput').addEventListener('input', function (event) {
            const text = event.target.value.replace(/\n/g, '[NL]');
            buildWord(text);
        });

        async function shareMessage() {
            const text = document.getElementById('messageInput').value;
            try {
                const response = await fetch('/share', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: text })
                });
                const data = await response.json();
                const shareUrl = `${window.location.origin}/${data.id}`;
                const shareUrlDiv = document.getElementById('shareUrl');
                shareUrlDiv.textContent = shareUrl;
                shareUrlDiv.style.display = 'block';
            } catch (error) {
                console.error('Error sharing message:', error);
            }
        }
    
    </script>
    <% if (typeof phrase !== 'undefined' && phrase) { %>
        <script>
            buildWord(`<%= phrase.replace(/\n/g, '[NL]') %>`);
        </script>
    <% } %>
    <script>
        setInterval(() => {
            const flashingElements = document.querySelectorAll('.flashing.on');
            flashingElements.forEach(element => {
                element.classList.toggle('on');
            });
        }, 1000);
    </script>
</body>

</html>